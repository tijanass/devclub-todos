{"version":3,"sources":["components/Todos.jsx","App.js","serviceWorker.js","index.js"],"names":["Todos","state","tasks","text","isComplete","task","completeTask","index","setState","setTask","removeTask","splice","handleEnterPress","event","key","addTask","this","push","className","value","onChange","target","onKeyPress","type","onClick","data","labels","datasets","filter","length","backgroundColor","hoverBackgroundColor","borderWidth","options","legend","fontColor","e","stopPropagation","onElementsClick","filterTasks","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAkIeA,E,2MA9HXC,MAAQ,CACJC,MAAO,CACH,CACIC,KAAM,2BACNC,YAAY,GAEhB,CACID,KAAM,iBACNC,YAAY,GAEhB,CACID,KAAM,mBACNC,YAAY,IAIpBC,KAAM,I,EAGVC,aAAe,SAAAC,GACX,IAAML,EAAK,YAAO,EAAKD,MAAMC,OAC7BA,EAAMK,GAAOH,YAAcF,EAAMK,GAAOH,WACxC,EAAKI,SAAS,CAACN,W,EAenBO,QAAU,SAAAJ,GACN,EAAKG,SAAS,CAACH,U,EAGnBK,WAAa,SAAAH,GACT,IAAML,EAAK,YAAO,EAAKD,MAAMC,OAC7BA,EAAMS,OAAOJ,EAAO,GACpB,EAAKC,SAAS,CAACN,W,EAGnBU,iBAAmB,SAAAC,GACG,UAAdA,EAAMC,KACN,EAAKC,W,yEAvBT,GAAwB,KAApBC,KAAKf,MAAMI,KAAa,CACxB,IAAMH,EAAK,YAAOc,KAAKf,MAAMC,OAC7BA,EAAMe,KAAK,CACPd,KAAMa,KAAKf,MAAMI,KACjBD,YAAY,IAGhBY,KAAKR,SAAS,CAACN,QAAOG,KADT,Q,+BAqBX,IAAD,SACiBW,KAAKf,MAApBC,EADF,EACEA,MAAOG,EADT,EACSA,KAEd,OACI,6BACI,yBAAKa,UAAU,4DACX,yBAAKA,UAAU,0CACX,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,uBAAd,YACA,wCACA,2BACIC,MAAOd,EACPe,SAAU,SAAAP,GAAK,OAAI,EAAKJ,QAAQI,EAAMQ,OAAOF,QAC7CG,WAAYN,KAAKJ,iBACjBW,KAAK,OAAOL,UAAU,iBAC1B,4BAAQM,QAAS,kBAAM,EAAKT,WACpBG,UAAU,uDADlB,YAGA,kBAAC,IAAD,CACIO,KAAM,CACFC,OAAQ,CACJ,OACA,QAEJC,SAAU,CAAC,CACPF,KAAM,CAACvB,EAAM0B,QAAO,SAAAvB,GAAI,OAAIA,EAAKD,cAAYyB,OAAQ3B,EAAM0B,QAAO,SAAAvB,GAAI,OAAKA,EAAKD,cAAYyB,QAC5FC,gBAAiB,CACb,UACA,WAEJC,qBAAsB,CAClB,UACA,WAEJC,YAAa,CAAC,EAAG,MAGzBC,QAAS,CACLC,OAAQ,CACJR,OAAQ,CACJS,UAAW,WAEfX,QAAS,SAACY,GAAD,OAAOA,EAAEC,qBAG1BC,gBAAiBtB,KAAKuB,gBAGlC,yBAAKrB,UAAU,iDACX,wBAAIA,UAAU,QAAd,SAEIhB,EAAMsC,KAAI,SAACnC,EAAME,GAAP,OACN,yBAAKO,IAAKP,EAAOW,UAAU,6DACvB,6BACI,2BAAOA,UAAWb,EAAKD,WAAa,sBAAwB,eACxD,0BAAMc,UAAU,YACZ,2BAAG,2BAAOM,QAAS,kBAAM,EAAKlB,aAAaC,IACjCgB,KAAK,eAElBlB,EAAKF,OAGd,6BAAK,uBAAGqB,QAAS,kBAAM,EAAKd,WAAWH,IAAQW,UAAU,6B,GApHzEuB,aCOLC,MANf,WACI,OACI,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.100179a1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Doughnut} from 'react-chartjs-2';\n\nclass Todos extends Component {\n    state = {\n        tasks: [\n            {\n                text: 'Read React Documentation',\n                isComplete: true\n            },\n            {\n                text: 'Make First App',\n                isComplete: true\n            },\n            {\n                text: 'Make Awesome App',\n                isComplete: false\n            }\n        ],\n\n        task: ''\n    };\n\n    completeTask = index => {\n        const tasks = [...this.state.tasks];\n        tasks[index].isComplete = !tasks[index].isComplete;\n        this.setState({tasks})\n    };\n\n    addTask() {\n        if (this.state.task !== '') {\n            const tasks = [...this.state.tasks];\n            tasks.push({\n                text: this.state.task,\n                isComplete: false\n            });\n            const task = '';\n            this.setState({tasks, task})\n        }\n    };\n\n    setTask = task => {\n        this.setState({task})\n    };\n\n    removeTask = index => {\n        const tasks = [...this.state.tasks];\n        tasks.splice(index, 1);\n        this.setState({tasks})\n    };\n\n    handleEnterPress = event => {\n        if (event.key === \"Enter\") {\n            this.addTask();\n        }\n    };\n\n    render() {\n        const {tasks, task} = this.state;\n\n        return (\n            <div>\n                <div className=\"todoes-container row w-75 h-50 mx-auto mt-5 h-500 shadow\">\n                    <div className=\"col-md-5 bg-dark-pink p-5 rounded-left\">\n                        <div className=\"m-auto d-block\">\n                            <h1 className=\"h3 text-center mb-5\">My Tasks</h1>\n                            <label>Task:</label>\n                            <input\n                                value={task}\n                                onChange={event => this.setTask(event.target.value)}\n                                onKeyPress={this.handleEnterPress}\n                                type=\"text\" className=\"form-control\"/>\n                            <button onClick={() => this.addTask()}\n                                    className=\"mt-3 btn btn-outline-light w-100 my-btn shadow mb-5\">Add Task\n                            </button>\n                            <Doughnut\n                                data={{\n                                    labels: [\n                                        'Done',\n                                        'ToDo'\n                                    ],\n                                    datasets: [{\n                                        data: [tasks.filter(task => task.isComplete).length, tasks.filter(task => !task.isComplete).length],\n                                        backgroundColor: [\n                                            '#5ac5ac',\n                                            '#eceef0',\n                                        ],\n                                        hoverBackgroundColor: [\n                                            '#5bcbb2',\n                                            '#eceef0',\n                                        ],\n                                        borderWidth: [0, 0],\n                                    }],\n                                }}\n                                options={{\n                                    legend: {\n                                        labels: {\n                                            fontColor: '#ffffff',\n                                        }  ,\n                                        onClick: (e) => e.stopPropagation()\n                                    }\n                                }}\n                                onElementsClick={this.filterTasks}/>\n                        </div>\n                    </div>\n                    <div className=\"col-md-7 bg-light rounded-right font-gray p-5\">\n                        <h3 className=\"mb-4\">Tasks</h3>\n                        {\n                            tasks.map((task, index) =>\n                                <div key={index} className=\"card shadow-sm card-task flex-row justify-content-between\">\n                                    <div>\n                                        <label className={task.isComplete ? 'cb-checkbox checked' : 'cb-checkbox'}>\n                                            <span className=\"cb-inner\">\n                                                <i><input onClick={() => this.completeTask(index)}\n                                                          type=\"checkbox\"/></i>\n                                            </span>\n                                            {task.text}\n                                        </label>\n                                    </div>\n                                    <div><i onClick={() => this.removeTask(index)} className=\"fas fa-trash\"></i></div>\n                                </div>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Todos;\n","import React from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\n\nfunction App() {\n    return (\n        <Todos/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}